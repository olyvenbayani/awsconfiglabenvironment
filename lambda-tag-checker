import json

def lambda_handler(event, context):
    # The allowed values for the 'Environment' tag
    allowed_values = ['prod', 'dev', 'stg']
    
    # Extract the resource ID (in this case, an EC2 instance ID) from the event
    resource_id = event['resourceId']
    resource_type = event['resourceType']
    
    # Check if the resource is of type EC2 instance
    if resource_type == "AWS::EC2::Instance":
        # Get the tags for the EC2 instance
        ec2_client = boto3.client('ec2')
        response = ec2_client.describe_tags(
            Filters=[{'Name': 'resource-id', 'Values': [resource_id]}]
        )
        
        # Check for the 'Environment' tag
        environment_tag = None
        for tag in response['Tags']:
            if tag['Key'] == 'Environment':
                environment_tag = tag['Value']
                break
        
        # If the 'Environment' tag is not found or the value is invalid, return non-compliant
        if not environment_tag or environment_tag not in allowed_values:
            return {
                'complianceType': 'NON_COMPLIANT',
                'annotation': f"The 'Environment' tag is either missing or has an invalid value. Allowed values: {', '.join(allowed_values)}."
            }
        
        # If the tag value is valid, return compliant
        return {
            'complianceType': 'COMPLIANT',
            'annotation': "The 'Environment' tag has a valid value."
        }
    
    # If the resource is not an EC2 instance, return compliant by default
    return {
        'complianceType': 'COMPLIANT',
        'annotation': "Resource is not an EC2 instance."
    }
